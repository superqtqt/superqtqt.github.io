<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-29T01:15:33.706Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.1广义线性模型[GeneralizedLinearModels]</title>
    <link href="http://yoursite.com/2016/08/24/1-1GeneralizedLinearModels/"/>
    <id>http://yoursite.com/2016/08/24/1-1GeneralizedLinearModels/</id>
    <published>2016-08-24T01:05:59.000Z</published>
    <updated>2016-08-29T01:15:33.706Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一组方法用于回归的目标价值预计将输入变量的线性组合。在数学概念, y是要预测的值</p>
<h1 id="1-1广义线性模型"><a href="#1-1广义线性模型" class="headerlink" title="1.1广义线性模型"></a>1.1广义线性模型</h1><p>下面的公式是一个线性模型。在数学意义上 $ \hat{y} $ 是预测值<br>$$ \hat{y}(w, x) = w_0 + w_1 x_1 + … + w_p x_p $$<br>通过这个模型，我把列表w = (w_1,…, w<em>p)指定为`coef</em><code>把$w_0$指定为</code>intercept_`</p>
<h2 id="普通最小二乘法"><a href="#普通最小二乘法" class="headerlink" title="普通最小二乘法"></a>普通最小二乘法</h2><p>线性回归适用线程模型集合w = (w_1,…, w_p)的最小平方差来观察响应数据集和响应数据集的相似性，数据上它的方程式是：<br>$$ \underset{w}{min\,} {|| X w - y||_2}^2 $$<br><img src="/img/plot_ols_0011.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是一组方法用于回归的目标价值预计将输入变量的线性组合。在数学概念, y是要预测的值&lt;/p&gt;
&lt;h1 id=&quot;1-1广义线性模型&quot;&gt;&lt;a href=&quot;#1-1广义线性模型&quot; class=&quot;headerlink&quot; title=&quot;1.1广义线性模型&quot;&gt;&lt;/a&gt;1.1广义线性模
    
    </summary>
    
    
      <category term="sklearn" scheme="http://yoursite.com/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn[快速开始]</title>
    <link href="http://yoursite.com/2016/08/10/scikit-learn-quickStart/"/>
    <id>http://yoursite.com/2016/08/10/scikit-learn-quickStart/</id>
    <published>2016-08-10T00:29:53.000Z</published>
    <updated>2016-08-28T03:02:00.008Z</updated>
    
    <content type="html"><![CDATA[<p>这个是scikit-learn的一个翻译，主要了方便自己记忆和学习，如果对您有用是我的幸运。<br>版本：0.17</p>
<h1 id="机器学习-the-problem-setting"><a href="#机器学习-the-problem-setting" class="headerlink" title="机器学习:the problem setting"></a>机器学习:the problem setting</h1><p>一般来说,机器学习问题考虑一组n的样本数据,然后试图预测未知数据的属性。如果数据不仅仅是简单的数字，它可能有多个属性或者维度；例如，aka的多维数据（aka multivariate data）</p>
<p>我们可以将机器学习分以下几个大类：</p>
<ul>
<li><strong>监督学习：</strong>这些数据的属性有我们想预测的属性。这个机器学习可再分类为：<ul>
<li><strong>分类算法：</strong>数据属于两个或多个分类，我们希望通过标记的数据来预测未标记的数据，分类问题的一个例子是手写数字识别的例子，目标是将每个输入向量分配给一个有限数目的离散的类别。分类的另一个理解是作为一个离散形式的监督学习在一个有限数量的类别和n的提供样品,试图用正确的类或类标签标记数据。</li>
<li><strong>回归算法：</strong>如果期望输出值由一个或多个连续的变量,那么这个任务称为回归，回归问题的一个例子是鲑鱼的长度的预测其年龄和体重的函数</li>
</ul>
</li>
<li><strong>非监督学习：</strong>训练数据集是一组没有目标值的X值集合。以发现数据中相似数据的方法叫做聚类；确定空间分步的叫做密度分步；使数据形象化（visualization)把高级数据降成低维数据.<blockquote>
<p>训练数据集和测试数据集<br>机器学习是从一些有属性的数据集中训练，并且将这个规律应用在新的数据集中。这是为什么在一个常见的机器中会把数据分成两分，一个叫做训练数据集，我们可以用它来进行学习；别外一个叫测试集合，我们可以用它来测试学习是否正确。</p>
</blockquote>
</li>
</ul>
<h1 id="加载测试数据集"><a href="#加载测试数据集" class="headerlink" title="加载测试数据集"></a>加载测试数据集</h1><p>scikit-learn有一些标准的数据集，例如用于分类的鸢尾花数据和手指数据，用于回归的波士顿房价数据集。我们用$表示shell的命令行，用&gt;&gt;&gt;表示Python的命令行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iris = datasets.load_iris()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>digits = datasets.load_digits()</div></pre></td></tr></table></figure></p>
<p>一个数据集就是一个保存数据的对象，并且存有一定的元数据信息。数据存储在<strong>.data</strong>,which is a <strong>n_samples,n_features</strong>array。在监督学习问题上，更多的结果变量存储在<strong>.target</strong>中。数据集间的不同可以点<a href="http://scikit-learn.org/stable/datasets/index.html#datasets" target="_blank" rel="external">这里</a><br>例如在手指的数据集中，<strong>digits.data</strong>给出了手指的属性数据，可能用于对指手进行分类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(digits.data)  </div><div class="line">[[  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">5.</span> ...,   <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">0.</span>]</div><div class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">0.</span> ...,  <span class="number">10.</span>   <span class="number">0.</span>   <span class="number">0.</span>]</div><div class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">0.</span> ...,  <span class="number">16.</span>   <span class="number">9.</span>   <span class="number">0.</span>]</div><div class="line"> ...,</div><div class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">1.</span> ...,   <span class="number">6.</span>   <span class="number">0.</span>   <span class="number">0.</span>]</div><div class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">2.</span> ...,  <span class="number">12.</span>   <span class="number">0.</span>   <span class="number">0.</span>]</div><div class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>  <span class="number">10.</span> ...,  <span class="number">12.</span>   <span class="number">1.</span>   <span class="number">0.</span>]]</div></pre></td></tr></table></figure></p>
<p>同时<strong>digits.target</strong>给出了手指分组后的数据，它代表了每个图形所学习的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>digits.target</div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, ..., <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure></p>
<h2 id="一组形状数据"><a href="#一组形状数据" class="headerlink" title="一组形状数据"></a>一组形状数据</h2><p>这些数据一般是二维的数组，原始的数据可能有很不好的形状。这种手指的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>digits.images[<span class="number">0</span>]</div><div class="line">array([[  <span class="number">0.</span>,   <span class="number">0.</span>,   <span class="number">5.</span>,  <span class="number">13.</span>,   <span class="number">9.</span>,   <span class="number">1.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">0.</span>,  <span class="number">13.</span>,  <span class="number">15.</span>,  <span class="number">10.</span>,  <span class="number">15.</span>,   <span class="number">5.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">3.</span>,  <span class="number">15.</span>,   <span class="number">2.</span>,   <span class="number">0.</span>,  <span class="number">11.</span>,   <span class="number">8.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">4.</span>,  <span class="number">12.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>,   <span class="number">8.</span>,   <span class="number">8.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">5.</span>,   <span class="number">8.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>,   <span class="number">9.</span>,   <span class="number">8.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">4.</span>,  <span class="number">11.</span>,   <span class="number">0.</span>,   <span class="number">1.</span>,  <span class="number">12.</span>,   <span class="number">7.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">2.</span>,  <span class="number">14.</span>,   <span class="number">5.</span>,  <span class="number">10.</span>,  <span class="number">12.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>],</div><div class="line">       [  <span class="number">0.</span>,   <span class="number">0.</span>,   <span class="number">6.</span>,  <span class="number">13.</span>,  <span class="number">10.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>,   <span class="number">0.</span>]])</div></pre></td></tr></table></figure></p>
<h1 id="学习和预测"><a href="#学习和预测" class="headerlink" title="学习和预测"></a>学习和预测</h1><p>In the case of the digits dataset, the task is to predict, given an image, which digit it represents. We are given samples of each of the 10 possible classes (the digits zero through nine) on which we fit an estimator to be able to predict the classes to which unseen samples belong.<br>在scikit-learn中，评估分类的是一个实现了<strong>fit(X,y)和predict(T)</strong>方法的Python对象.**sklean.svm.SVC是一个实现上了 support vector classification的评估例子。评估的构造函数带有参数和模型，我们把这个评估当成一个黑合子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC(gamma=<span class="number">0.001</span>, C=<span class="number">100.</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="关闭模型参数"><a href="#关闭模型参数" class="headerlink" title="关闭模型参数"></a>关闭模型参数</h3><p>例子中我们手动设定了<strong>gamma</strong>参数。可以使用<strong><a href="http://scikit-learn.org/stable/modules/grid_search.html#grid-search" target="_blank" rel="external">grid search</a></strong>和<strong><a href="http://scikit-learn.org/stable/modules/cross_validation.html#cross-validation" target="_blank" rel="external">chross validation</a></strong>工具找到最优参建<br>我们使用一个<strong>clf</strong>的例子当一个分类器。我们必须安装这个模型，进行模型的训练。我们把训练数据集传入<strong>fit</strong>方法。我们使用训练数据集中的所有数据，除最后一个。我们使用<strong>[:-1]</strong>来获得训练数据集<strong>digits.data</strong>中除最后一个的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;&gt;clf.fit(digits.data[:<span class="number">-1</span>], digits.target[:<span class="number">-1</span>])  </div><div class="line">SVC(C=<span class="number">100.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="number">0.001</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样我们就可以使用digits数据集训练出来的数据进行预测了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict(digits.data[<span class="number">-1</span>:])</div><div class="line">array([<span class="number">8</span>])</div></pre></td></tr></table></figure></p>
<h1 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h1><p>可以使用Pythond的 built-in persistence model来保存模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iris = datasets.load_iris()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = iris.data, iris.target</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, y)  </div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = pickle.dumps(clf)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf2 = pickle.loads(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>])</div><div class="line">array([<span class="number">0</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>]</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>在scikit的某些情况，你可以使用joblib的方法(<strong>joblib.dump</strong> &amp; <strong>joblib.load</strong>)来保存模型，它对大的数据是比较有效的，但是必须保存在磁盘上，不能生成一个字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>joblib.dump(clf, <span class="string">'filename.pkl'</span>)</div></pre></td></tr></table></figure></p>
<p>稍后你可以加载模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf = joblib.load(<span class="string">'filename.pkl'</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:在pickle 保存模型时会有一些安全问题，请<a href="http://scikit-learn.org/stable/modules/model_persistence.html#model-persistence" target="_blank" rel="external">参照</a></p>
<h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p>scikit-learn估计遵循一定的规则,使他们的行为更预测。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>除非特殊情况，输出全转成float64<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> random_projection</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X = rng.rand(<span class="number">10</span>, <span class="number">2000</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X = np.array(X, dtype=<span class="string">'float32'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X.dtype</div><div class="line">dtype(<span class="string">'float32'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>transformer = random_projection.GaussianRandomProjection()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X_new = transformer.fit_transform(X)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X_new.dtype</div><div class="line">dtype(<span class="string">'float64'</span>)</div></pre></td></tr></table></figure></p>
</blockquote>
<p>例子中，X是float32，用fit_transform方法把它转成float64<br>回归的结果转成float64,分类器的结果是maintained<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iris = datasets.load_iris()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf = SVC()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(iris.data, iris.target)  </div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(clf.predict(iris.data[:<span class="number">3</span>]))</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(iris.data, iris.target_names[iris.target])  </div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(clf.predict(iris.data[:<span class="number">3</span>]))  </div><div class="line">[<span class="string">'setosa'</span>, <span class="string">'setosa'</span>, <span class="string">'setosa'</span>]</div></pre></td></tr></table></figure></p>
<p>在调用<strong>fit</strong>方法返回<strong>itis.target</strong>对象，调用<strong>predict</strong>方法会返回一个整数数组。第二次调用<strong>predice</strong>返回一个字符串数组</p>
<h2 id="更新参数"><a href="#更新参数" class="headerlink" title="更新参数"></a>更新参数</h2><p>模型的参数 Hyper-parameters在构造函数执行完可通过<strong>sklearn.pipeline.Pipeline.set_params</strong>更新。调用<strong>fit</strong>方法多次会更新里边的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X = rng.rand(<span class="number">100</span>, <span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = rng.binomial(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">100</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>X_test = rng.rand(<span class="number">5</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf = SVC()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.set_params(kernel=<span class="string">'linear'</span>).fit(X, y)  </div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'linear'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict(X_test)</div><div class="line">array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.set_params(kernel=<span class="string">'rbf'</span>).fit(X, y)  </div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict(X_test)</div><div class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<p>Here, the default kernel rbf is first changed to linear after the estimator has been constructed via SVC(), and changed back to rbf to refit the estimator and to make a second prediction.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个是scikit-learn的一个翻译，主要了方便自己记忆和学习，如果对您有用是我的幸运。&lt;br&gt;版本：0.17&lt;/p&gt;
&lt;h1 id=&quot;机器学习-the-problem-setting&quot;&gt;&lt;a href=&quot;#机器学习-the-problem-setting&quot; class
    
    </summary>
    
    
      <category term="sklearn" scheme="http://yoursite.com/tags/sklearn/"/>
    
  </entry>
  
</feed>
